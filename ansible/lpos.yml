- name: Setup LPOS (backend and frontend)
  hosts: lpos
  become: true

  roles:
    - geerlingguy.docker
    - local.mongodb

  tasks:
    - name: install dependencies
      apt:
        name:
          - rsync
          - rsyslog
          - python3
          - virtualenv
          - git
        state: present

    - name: pull docker images
      docker_image:
        name: '{{ item }}'
        source: pull
      loop:
        - '{{ alpine_image }}'
        - '{{ dns_image }}'
        - '{{ dhcp_image }}'

    - name: stop services, if running
      ansible.builtin.systemd_service:
        name: '{{ item }}'
        state: stopped
      ignore_errors: true
      loop:
        - '{{ scanner_service_name }}'
        - '{{ lpos_service_name }}'

    - name: create project direcory
      ansible.builtin.file:
        path: '{{ project_dir }}'
        state: directory
        mode: '0755'

    - name: upload project files
      ansible.posix.synchronize:
        src: '{{ item }}'
        dest: '{{ project_dir }}'
        delete: true
        recursive: true
        rsync_opts:
          - "--exclude='*.pyc'"
          - "--exclude='*__pycache__'"
      loop:
        - '../backend/main.py'
        - '../backend/scanner.py'
        - '../backend/cli.py'
        - '../backend/requirements.txt'
        - '../backend/elements'
        - '../backend/endpoints'
        - '../backend/helpers'
        - '../backend/MTSwitch'
        - '../backend/static'

    - name: setup virtualenv
      ansible.builtin.command: virtualenv -p /usr/bin/python3 {{ [project_dir, 'venv'] | path_join }}

    - name: install virtualenv requirements
      ansible.builtin.command: "{{ [project_dir, 'venv/bin/pip'] | path_join }} install -r {{ [project_dir, 'requirements.txt'] | path_join }}"

    - name: prepare lpos cli
      ansible.builtin.copy:
        content: "#!/bin/bash\n{{ [project_dir, 'venv/bin/python'] | path_join }} {{ [project_dir, 'cli.py'] | path_join }} $*"
        dest: /usr/bin/lpos
        mode: '0755'

    - name: configure rsyslog
      ansible.builtin.copy:
        src: files/rsyslog.conf
        dest: /etc/rsyslog.d/lpos.conf
      notify: restart rsyslog service

    - name: configure logrotate
      ansible.builtin.copy:
        src: files/logrotate
        dest: /etc/logrotate.d/lpos
        mode: '0644'

    - name: copy lpos service file
      template:
        src: templates/lpos.service.j2
        dest: '/etc/systemd/system/{{ lpos_service_name }}'
        owner: root
        group: root
        mode: '0644'
      register: lpos_service_file

    - name: copy lpos-scanner service file
      template:
        src: templates/lpos-scanner.service.j2
        dest: '/etc/systemd/system/{{ scanner_service_name }}'
        owner: root
        group: root
        mode: '0644'
      register: scanner_service_file

    - name: force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true
      when: lpos_service_file.changed or scanner_service_file.changed

    - name: queue handler to start lpos service
      ansible.builtin.command: /bin/true
      notify: start lpos service

    - name: queue handler to start lpos-canner service
      ansible.builtin.command: /bin/true
      notify: start lpos-scanner service

    - name: queue handler to prune docker images
      ansible.builtin.command: /bin/true
      notify: prune docker images

  handlers:
    - name: restart rsyslog service
      ansible.builtin.systemd_service:
        name: 'rsyslog'
        state: restarted

    - name: start lpos service
      ansible.builtin.systemd_service:
        name: '{{ lpos_service_name }}'
        state: started
        enabled: true

    - name: start lpos-scanner service
      ansible.builtin.systemd_service:
        name: '{{ scanner_service_name }}'
        state: started
        enabled: true

    - name: prune docker images
      ansible.builtin.command: docker image prune -f
